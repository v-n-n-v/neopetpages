<html>
<head>
<meta name="Robots" content="all">
<meta name="Description" content="NeoPets.Com - Virtual Pet Community!  Join up for fun, games, shops, auctions, chat and more!">
<meta name="Keywords" content="pets, pet, games, game, virtual, chat, fun, creatures, prizes, play, tamagotchi, virtual pet, pokemon, kids">
<title>
Priscilla_xx got their homepage at Neopets.com
</title>

<script language='javascript'>
  if (top.location != location) {
    top.location.href = document.location.href ;
  }
</script>
<script src="//images.neopets.com/js/jquery-1.7.1.min.js" type="text/javascript"></script>

</head>
<body marginwidth=0 marginheight=0 topmargin=0 leftmargin=0>
<table width="100%" border="0" cellspacing="0" cellpadding="0" vspace="0" hspace="0" bgcolor="dddd77">
<tr><td align=center><a href='//www.neopets.com/refer.phtml?username=seegensays'>
<img src='//images.neopets.com/images/homepage_banner.gif' height=14 width=602 border=0></a><br>
</td></tr></table>
<style>
body {
	background: #ffd8e3;
	width: 100%;
	overflow: hidden;
}
table {
	visibility: hidden;
}
.section table {
	visibility: visible;
}
.sf {
	display: none;
}
a {
	color: #962685;
	font-weight: bold;
	text-decoration: none;
}
a:hover {
	color: #730a63;
}
b {
	text-transform: uppercase;
	color: #ea3677;
}
i {
	letter-spacing: 2px;
	border-bottom: 2px dotted #cfb3f5;
	color: #56397e;
}
textarea {
	width: 600px;
	margin: 20px;
	padding-left: 5px;
	padding-right: 65px;
	color: #d47b93;
	border: 1px solid #d47b93;
	background: url("http://i55.tinypic.com/30iym4i.png") top right repeat-y #fff4f7;
	font-size: 12px;
	line-height: 20px;
	overflow: hidden;
}
#sidebar {
	top: 0px;
	left: 0px;
	height: 100%;
	background: #8e2a45;
	z-index: 2;
}
ul#sidebar_nav {
	padding: 0px;
	margin: 0px;
	margin-top: 50px;
}
li.wholelink {
	list-style: none;
	display: block;
	width: 200px;
	height: 50px;
	overflow: hidden;
}
li.wholelink:hover {
	overflow: visible;
	background: #a13d58;
}
li.wholelink a.biglink {
	display: block;
	width: 200px;
	height: 50px;
	text-align: center;
	text-transform: uppercase;
	font-family: Verdana;
	font-size: 13px;
	line-height: 50px;
	color: white;
}
li.wholelink a.biglink:hover {
	background: #a13d58;
}
li.wholelink ul.navmenu {
	background: #a13d58;
	width: 160px;
	list-style: none;
	padding: 1px;
	margin-left: 200px;
	margin-top: -50px;
}
li.wholelink ul.navmenu li a {
	display: block;
	margin: 3px;
	padding: 3px;
	font-weight: normal;
	font-family: Verdana;
	font-size: 12px;
	color: white;
}
li.wholelink ul.navmenu li a:hover {
	background: #b34b67;
}
#container {
	width: 100%;
	height: 100%;
	overflow: hidden;
	top: 0px;
	left: 0px;
}
.section {
	width: 100%;
	height: 100%;
	overflow: auto;
	top: 0px;
}
#main_page {
	left: 0px;
}
#general {
	left: 8000px;
}
#introduction {
	left: 12000px;
}
#HTML_basics {
	left: 16000px;
}
#CSS_basics {
	left: 20000px;
}
#ids_classes {
	left: 24000px;
}
#divs_positioning {
	left: 28000px;
}
#compatibility {
	left: 32000px;
}
#off_neopets {
	left: 36000px;
}
#in_depth {
	left: 40000px;
}
#tables {
	left: 44000px;
}
#images {
	left: 48000px;
}
#lists {
	left: 52000px;
}
#links {
	left: 56000px;
}
#ul_specific {
	left: 60000px;
}
#pp_specific {
	left: 64000px;
}
#reference {
	left: 68000px;
}
#colors {
	left: 72000px;
}
#HTML_tags {
	left: 76000px;
}
#CSS_codes {
	left: 80000px;
}
#help {
	left: 84000px;
}
#faq {
	left: 88000px;
}
#diy_trouble {
	left: 92000px;
}
#contact {
	left: 96000px;
}
#other_resources {
	left: 100000px;
}
#sitely {
	left: 104000px;
}
#parting_message {
	left: 124000px;
}
.header {
	margin-top: 50px;
	margin-left: 250px;
	border: 1px solid #8e2a45;
}
.footer {
	margin-top: 30px;
	margin-left: 250px;
	margin-bottom: 50px;
	border: 1px solid #8e2a45;
}
.box {
	width: 800px;
	margin-top: 30px;
	margin-left: 250px;
	background: white;
	border: 1px solid #8e2a45;
	font-family: Verdana;
	font-size: 12px;
	line-height: 20px;
}
h1 {
	background: #a13d58;
	font-size: 20px;
	text-transform: uppercase;
	color: white;
	padding: 15px;
	margin-top: 0px;
	margin-bottom: 15px;
}
p {
	text-align: justify;
	text-indent: 15px;
	margin: 10px;
}
#updates {
	width: 800px;
	height: 200px;
	overflow: auto;
}
#updates p {
	text-indent: 0px;
	margin-bottom: 20px;
}
.article_listing {
	text-align: center;
	margin-top: 40px;
	margin-bottom: 20px;
}
.reference_table {
	margin: 15px;
	margin-top: 0px;
	border: 1px solid #e69aaf;
}
#rt1 {
	margin: auto;
	margin-bottom: 15px;
}
.col_title {
	background: #e69aaf;
}
.row_content_1 {
	background: #fff3f6;
}
.row_content_2 {
	background: #fbdfe7;
}
.reference_table td {
	font-size: 12px;
	line-height: 20px;
	padding: 5px;
}
.col_title td {
	text-align: center;
	font-weight: bold;
	color: white;
}
.attrib {
	width: 100px;
	text-align: center;
}
.desc {
	width: 300px;
}
.tag, .display {
	text-align: center;
}
.ex {
	width: 150px;
	text-align: center;
}
#link_back a img {
	margin: 15px;
	margin-bottom: -10px;
}
#link_back textarea {
	width: 88px;
	height: 25px;
	margin: 15px;
	padding-right: 0px;
}
#affiliates a img, #listers a img {
	margin: 15px;
}
</style><div id="sidebar" style="position: absolute;">

<ul id="sidebar_nav"><li class="wholelink">
<a href="#main_page" class="biglink">Home</a>
</li>

<li class="wholelink">
<a href="#general" class="biglink">General</a>
<ul class="navmenu"><li><a href="#introduction">Introduction</a></li>
<li><a href="#HTML_basics">HTML Basics</a></li>
<li><a href="#CSS_basics">CSS Basics</a></li>
<li><a href="#ids_classes">IDs &amp; Classes</a></li>
<li><a href="#divs_positioning">Divs &amp; Positioning</a></li>
<li><a href="#compatibility">Browser Compatibility</a></li>
<li><a href="#off_neopets">Off Neopets</a></li>
</ul></li>

<li class="wholelink">
<a href="#in_depth" class="biglink">In-Depth</a>
<ul class="navmenu"><li><a href="#tables">Tables</a></li>
<li><a href="#images">Images</a></li>
<li><a href="#lists">Lists</a></li>
<li><a href="#links">Links</a></li>
<li><a href="#ul_specific">Userlookup Specific</a></li>
<li><a href="#pp_specific">Petpage Specific</a></li>
</ul></li>

<li class="wholelink">
<a href="#reference" class="biglink">Reference</a>
<ul class="navmenu"><li><a href="#colors">Colors &amp; Hex Codes</a></li>
<li><a href="#HTML_tags">HTML Tags</a></li>
<li><a href="#CSS_codes">CSS Codes</a></li>
</ul></li>

<li class="wholelink">
<a href="#help" class="biglink">Help</a>
<ul class="navmenu"><li><a href="#faq">F.A.Q.</a></li>
<li><a href="#diy_trouble">D.I.Y. Troubleshooting</a></li>
<li><a href="#contact">Contact</a></li>
<li><a href="#other_resources">Other Resources</a></li>
</ul></li>

<li class="wholelink">
<a href="#sitely" class="biglink">Sitely</a>
</li>

<li class="wholelink">
<a href="#parting_message" class="biglink">Leave?</a>
<ul class="navmenu"><li><a href="#parting_message">Parting Message</a></li>
<li><a href="/userinfo.phtml">Edit Your Userlookup</a></li>
<li><a href="/edithomepage.phtml">Edit Your Petpage</a></li>
<li><a href="/userlookup.phtml?user=seegensays">My Userlookup</a></li>
<li><a href="/~1xx_vo_spader_xx1">My Premades</a></li>
<li><a href="/guilds/guild.phtml?id=1935939">Nip/Design</a></li>
<li><a href="/index.phtml">Neopets Home</a></li>
</ul></li>

</ul></div>
<div id="container" style="position: absolute;">

<div class="section" id="main_page" style="position: absolute;">

<img src="http://i54.tinypic.com/2ibmey0.png" class="header"><div class="box">

<h1>Welcome</h1>

<p>
Why hello there, eager Neopian! So you're here to learn how to code, aren't you? Well, you've come to the right place. Here at <i>The Beginner's Guide to HTML &amp; CSS</i>, I (that is, <a href="/userlookup.phtml?user=seegensays">Bess</a>) have endeavored to compile a <b>master guide</b> of all the coding I've learned over the years. It's an ambitious project, and it's... erm... not quite finished yet. (But hopefully you'll find what I <i>do</i> have up helpful!)
</p>

<p>
I start at the very beginning, for people who have absolutely no coding experience whatsoever. Read the <a href="#general">General</a> articles first (the <a href="#introduction">Introduction</a>, <a href="#HTML_basics">HTML Basics</a>, and <a href="#CSS_basics">CSS Basics</a> sections are <i>especially</i> important). The <a href="#in_depth">In-Depth</a> articles aren't really in a particular order, so feel free to skip around depending on what you'd like to learn more about. 
</p>

<p>
Even if you consider yourself a more seasoned coder, check out the <a href="#reference">Reference</a> and <a href="#help">Help</a> sections, you might find them useful. As you'll see when you go to the help section, I would love to help you with your specific coding woes, and if you think I'm missing something from the guide (as in, coding help that applies to the general public, not just you) then I'll be sure to work on adding it in. 
</p>

<p>
So, just use the nifty navigation bar over on the left there to make your way through the site, and happy coding! =)
</p>

</div>

<div class="box">
<h1 style="margin-bottom: 0px;">Updates</h1>
<div id="updates">

<p>
<b>Monday March 19th, 2012</b><br>
Oh hey I still exist! The likelyhood of this page getting updated/added to anytime soon = slim to none, but hopefully what's up so far is helpful to someone, somewhere. Oh and also, listed at <a href="/~volahdi">Masked</a>.
</p>

<p>
<b>Saturday September 24th, 2011</b><br>
Added some information on nesting to the <a href="#CSS_basics">CSS Basics</a> section that correlates to the stuff I added to the <a href="#HTML_basics">HTML Basics</a> section... wow, was that really almost 2 weeks ago? 
</p>

<p>
<b>Monday September 5th, 2011</b><br>
I added some information on nesting to the <a href="#HTML_basics">HTML Basics</a> section. (Bess: Improving her unfinished guide a leeeetle teeeny bit at a time. XD)
</p>

<p>
<b>Saturday September 3rd, 2011</b><br>
Inconceivable! I make a new layout for this page <i>and</i> move over all the content in just two days? (Granted, I pretty much haven't been doing anything else for the past two days.) Anyway, now it'll be easier for me to add just a little bit at a time to this guide over the course of the school year. It starts this Wednesday, and I don't see much free time in my future with my courseload this year. =/
</p>

</div>
</div>

<img class="footer" src="http://i53.tinypic.com/15wjp1y.png"></div>
<div class="section" id="general" style="position: absolute;">

<img src="http://i51.tinypic.com/jj89cx.png" class="header"><div class="box">

<h1>General Knowledge Articles</h1>

<p>
Hey there. In this section of the guide, you'll find articles with general coding information. You'll learn what coding is exactly, the basics of HTML and CSS, how to combine the two coding "languages" with ids and classes, how to do some basic layout positioning, and even some stuff about coding for different browsers and coding offsite.
</p>

<p>
I recommend that you read <b>Introduction - Divs &amp; Positioning</b> in order, before you move on to the In-Depth articles. The <b>Browser Compatibility</b> and <b>Off Neopets</b> guides are helpful and general, to be sure, but they're more... afterthoughts, after you've gotten used to coding. 
</p>

<p>
Anyway, here they are: 
</p>

<div class="article_listing">
<a href="#introduction">Introduction</a> -
<a href="#HTML_basics">HTML Basics</a> -
<a href="#CSS_basics">CSS Basics</a> -
<a href="#ids_classes">IDs &amp; Classes</a> -
<a href="#divs_positioning">Divs &amp; Positioning</a> <br><a href="#compatibility">Browser Compatibility</a> -
<a href="#off_neopets">Off Neopets</a>
</div>

</div>

<img class="footer" src="http://i53.tinypic.com/15wjp1y.png"></div>
<div class="section" id="introduction" style="position: absolute;">

<img src="http://i51.tinypic.com/1zoj90j.png" class="header"><div class="box">

<h1>Code as a Language</h1>

<p>
So... what <i>is</i> coding, anyway? If you've never attempted to figure it out, you just know it as that incomprehensible block of text you copy and paste to add something pretty to your web page. I know, it's difficult to decipher, but trust me - by the end of this guide, you'll understand exactly what it is that you copy and paste.
</p>

<p>
I think I'll start off my explanation by saying that coding is the <b>language</b> of the web. It ties everything together; without it, there would be nothing. Scary, right?
</p>

<p>
Let me explain in more detail: When you type something into the editing box and save it, you're inputting information. When you use a browser (like Firefox or Internet Explorer) to view that information, before it's displayed to you, the browser has to <i>read</i> it (which is why things will change on a page as it's loading; the browser keeps reading new stuff). If you put in just text, the browser will show that plain text without changing it; it doesn't understand what you wrote, just that it should be displayed. 
</p>

<p>
All right, so I guess the web <i>can</i> exist without coding, technically. But how boring would it be if everything was just plain text? That's why we have coding. 
</p>

<p>
If you were to type in: <b>Make this text purple</b>, the browser would just parrot it back to you (it doesn't understand English, after all). If you type that out in the language of <i>code</i>, however, the browser will understand you, and make the text purple accordingly.
</p>

<p>
If code is browser language, then I suppose HTML and CSS are <i>dialects</i> of that language, along with some other stuff (like PHP and Java). We'll only be learning HTML and CSS in this guide, however (because those are the only two allowed through the Neopets filters).
</p>

<div class="article_listing">
Move on to <a href="#HTML_basics">HTML Basics</a>? <br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img class="footer" src="http://i53.tinypic.com/15wjp1y.png"></div>
<div class="section" id="HTML_basics" style="position: absolute;">

<img src="http://i55.tinypic.com/2a64l5z.png" class="header"><div class="box">

<h1>HTML - The Foundation</h1>

<p>
The first dialect we're going to learn is <b>HTML</b>. The header above says that HTML is the <i>foundation</i>. The extended metaphor I'm using here is a house: its foundation is the very basic part of the entire thing. Without a foundation, a house will topple over, and all its fancy detailing will become obsolete. Without HTML, you have nowhere to <i>start</i> when you begin coding your web page.
</p>

<p>
The HTML codes themselves are basically like name tags - they tell the browser what a certain element is. In fact, HTML codes are generally referred to as <i>tags</i>.
</p>

<p>
Let's say you want to put on your web page, "Hi, my name is Bob." You would like the phrase "Hi, my name is Bob" to be the color red. The code below will tell the browser just that.
</p>

<div align="center">
<textarea style="height: 25px;"><font color="red">Hi, my name is Bob.</font>
</textarea></div>

<p>
So, <b>font</b> is the <i>tag</i>; <b>color="red</b> is the attribute. Or, in English if you prefer, <i>font</i> tells the browser that the text contained inside is labeled as a font, and <i>color="red</i> tells the browser that the color should be red. 
</p>

<p>
You can add as many different attributes to a single tag as you want. For example, if you wanted "Hi, my name is Bob" to be red, Times New Roman, and size 3, you would use the following code:
</p>

<div align="center">
<textarea style="height: 65px;"><font color="red" face="Times New Roman" size="3">
Hi, my name is Bob.
</font>
</textarea></div>

<p>
So, the basic idea is to enclose whatever you want to change between two <b>tags</b> - the opening one (<i>font</i>) and the closing one (<i>/font</i>). Then, you can add attributes to the opening tag (<i>color="red", face="Times New Roman", size="3</i>).
</p>

<p>
<b>However</b>, some HTML tags require no closing tag. The most common of this exception is the image tag.
</p>

<div align="center">
<textarea style="height: 25px;"><img src="/urlofimagehere.png"></textarea></div>

<p>
Usually HTML surrounds something that's already on the page (like text), which is why it needs an opening and closing tag. But because the <b>img</b> tag is <i>putting something on</i> the page that wasn't already there, it doesn't need a closing tag. 
</p>

<p>
By the same token, the <b>br</b> tag doesn't need a closing tag. Putting "br" in your coding is like pressing "enter" or "return" on your keyboard.
</p>

<div align="center">
<textarea style="height: 45px;">
Because extra spaces and line breaks don't show up on web pages,
<br>you have to insert <br> where you want the "enter" or "return" to be.
</textarea></div>

<p>
You can put HTML tags within other HTML tags if you want - that's called <i>nesting</i>. It's almost impossible not to nest if you're coding a complex page - I'm doing it right now. I used <b>p</b> and <b>/p</b> to make this a paragraph, and I used <b>b</b> and <b>/b</b> several times to make bolded text.
</p>

<p>
When you have tags within tags, you need to be careful of how you set it up. I like to think of the <i>rainbow</i> rule. It's a bit silly, but hey, it's how my preschool teacher taught us negative numbers. When making a number line, you have to make sure the numbers form a rainbow, not a weird cross-y...thing. Like this:
</p>

<div align="center">
<img src="http://i53.tinypic.com/x2tb95.png"></div>

<p>
The same goes for nested HTML. You want to make sure your tags make pretty rainbows.
</p>

<div align="center">
<img src="http://i56.tinypic.com/10s7yw1.png"></div>

<p>
So, now (hopefully) you know the basic idea of HTML. If you'd like to reference a listing of commonly used HTML tags and attributes, just go to the <a href="#HTML_tags">HTML Tags</a> part of the <a href="#reference">Reference</a> section.
</p>

<div class="article_listing">
Go back to the <a href="#introduction">Introduction</a>? - Move on to <a href="#CSS_basics">CSS Basics</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="CSS_basics" style="position: absolute;">

<img src="http://i54.tinypic.com/1ikffp.png" class="header"><div class="box">

<h1>CSS - The Fancy</h1>

<p>
To begin the <b>CSS</b> section, I'd like to refer back to my extended metaphor. Like a house, a web page isn't very pretty if all you have is the foundation. Sure, you can change colors and fonts and sizes of text, and you can even add borders and other neat effects to images, but where does that get you? To make a <i>layout</i>, to give your web page <b>structure</b>, you need much more than HTML. You need the other (major) language of the Internet - CSS. You need to wow your visitors with the <i>fancy</i>.
</p>

<p>
Say you want a box (labeled "boxy" - more on that later) 100 pixels tall and 400 pixels wide, with a <b>purple</b> background. And you want that box to be <i>exactly</i> 100 pixels from the top of the screen and 25 pixels from the left of the screen.
</p>

<p>
Well, you certainly can't do that with just HTML. Those HTML codes don't exist! So, you use CSS.
</p>

<div align="center">
<textarea style="height: 165px;">
#boxy {
	height: 100px;
	width: 400px;
	background-color: purple;
	position: absolute;
	top: 100px;
	left: 25px;
}
</textarea></div>

<p>
See what I did there? I named the element I wanted to change, put in the opening brace (<b>{</b>), added all my commands, then put in the closing brace (<b>}</b>). The following is a simple template:
</p>

<div align="center">
<textarea style="height: 105px;">
SELECTOR {
	ATTRIBUTE: PROPERTY;
	ATTRIBUTE: PROPERTY;
	ATTRIBUTE: PROPERTY;
}
</textarea></div>

<p>
You can add as many <i>ATTRIBUTE: PROPERTY;</i>s as you want. You always have to make sure that a colon (<b>:</b>) follows the attribute, and that a semicolon (<b>;</b>) follows the property. 
</p>

<p>
You may have noticed that CSS is formatted in a particular way, with those particular line breaks and spaces and tabs in front of every <i>attribute</i>. This is because, on Neopets, the filters automatically organize your CSS for you, so even if you typed that all out in one line with no spaces anywhere, after you hit "save changes" it'll revert to that. You should probably type out your CSS like that from the get-go, though, to make it easier on yourself. 
</p>

<p>
So, where do you put all of this? With <i>HTML</i>, all you had to do was stick the code in anywhere. But if you just stick the <i>CSS</i> code in, it won't do anything - your web page will literally have:
</p>

#boxy {
   height: 100px;
   width: 400px;
   background-color: purple;
   position: absolute;
   top: 100px;
   left: 25px;
}

<p>
on it, wherever you stuck the code. You need to tell the browser that it should read the text as <b>CSS</b>, not just text.
</p>

<p>
One way of doing that is adding inline styles to your HTML. Let's say our <i>#boxy</i> is a div. (I'm kind of skipping ahead here, so don't worry if you're confused - I'll explain in the <a href="#ids_and_classes">IDs &amp; Classes</a> and <a href="#divs_and_positioning">Divs &amp; Positioning</a> sections.)
</p>

<p>
Within #boxy's HTML tag, we're going to add some CSS styles.
</p>

<div align="center">
<textarea style="height: 65px;"><div id="boxy" style="height: 100px; width: 400px; background-color: purple; position: absolute; top: 100px; left: 25px;">
</div>
</textarea></div>

<p>
This might seem like the most straightforward way to add CSS to your page, but in reality, it should be used only where completely necessary. For instance, on Neopets petpages, because the filters are messed up, you <b>have</b> to include any positioning (like the <i>position: absolute;</i> used on #boxy) in inline styles.
</p>

<p>
A much easier way to add CSS to your page is to put it in between <b>style</b> tags. This enables you to quickly edit your CSS without having to scroll though miles of HTML coding to find it. Observe:
</p>

<div align="center">
<textarea style="height: 225px;"><style>
#boxy {
	height: 100px;
	width: 400px;
	background-color: purple;
	top: 100px;
	left: 25px;
}
</style>

Put HTML codes and text outside of the style tags...
</textarea></div>

<p>
Notice that the HTML is outside the style tags (or, more accurately, <i>below</i> the closing style tag).
</p>

<p>
One of the common misconceptions among beginners is that  you have to have opening and closing style tags for each element you want to change. If you did that, the coding would look like:
</p>

<div align="center">
<textarea style="height: 285px;"><style>
#boxy {
	height: 100px;
	width: 400px;
}
</style><style>
#boxish {
	height: 400px;
	width: 100px;
}
</style>

HTML and regular text here...
</textarea></div>

<p>
It would work, but look how messy that is! You really only need <b>one</b> set of style tags. This is a much better way to do it:
</p>

<div align="center">
<textarea style="height: 245px;"><style>
#boxy {
	height: 100px;
	width: 400px;
}
#boxish {
	height: 400px;
	width: 100px;
}
</style>

HTML and regular text here...
</textarea></div>

<p>
Also, if you find that multiple selectors have the same attributes and properties... <b>combine them</b>, using commas (,). It saves loads of character space. For example - say #boxy and #boxish both have a with of 400 pixels and a height of 100 pixels. Your coding looks like this:
</p>

<div align="center">
<textarea style="height: 165px;">
#boxy {
	width: 400px;
	height: 100px;
}
#boxish {
	width: 400px;
	height: 100px;
}
</textarea></div>

<p>
After you combine it, it should look like this:
</p>

<div align="center">
<textarea style="height: 85px;">
#boxy, #boxish {
	width: 400px;
	height: 100px;
}
</textarea></div>

<p>
That's cutting down the character space used by almost <b>half</b>. Not only that, but now your coding is <i>cleaner</i> and more <i>efficient</i>, making it easier to go back and edit later.
</p>

<p>
Now, what happens if you don't put that comma in between your two selectors? It's one little character, but it changes the entire meaning behind that section of coding. Instead of selecting #boxy <i>and</i> #boxish, the browser finds #boxy, then looks <i>within</i> at #boxish. Sounds confusing, right? Well, let me explain what I mean.
</p>

<p>
Remember that nesting stuff I talked about in the <a href="#HTML_basics">HTML Basics</a> section? You know, an element within an element? Well, you can limit which elements you affect by only selecting the nested versions in the CSS. For instance, say you want most <b>bold</b> text on a page to have one style, but you want bold text whenever it occurs in a <i>paragraph</i> to have a different style. You would do the following:
</p>

<div align="center">
<textarea style="height: 325px;"><style>
b {
	color: blue;
}
p b {
	color: green;
}
</style>

This is some "unparagraphed" text. Look, some <b>bold text</b>! It should appear blue on the page.

<p>
This is some "paragraphed" text. Because this <b>bold text</b> is enclosed within "p" and "/p" tags, it should appear green instead of blue.
</p>
</textarea></div>

<p>
This method of selecting elements within elements is very useful when you're working with lots of nesting - for instance, editing elements within the modules of a userlookup. Remember, when selecting elements within elements in the CSS, browsers read from the outside in. <b>P B</b> selects bold text within paragraphs; <b>B P</b> selects whole paragraphs that have been enclosed in bold tags. 
</p>

<p>
Also remember that browsers read code top to bottom. Lets say you have two lines of code that contradict one another, like in the example below.
</p>

<div align="center">
<textarea style="height: 125px;">
#boxy {
	width: 100px;
}
#boxy {
	width: 200px;
}
</textarea></div>

<p>
Your browser will go with the last thing it reads, and #boxy will have a width of 200 pixels instead of <i>100</i> pixels. You can tell your browser to give higher priority to the first thing, however, by using <b>!important</b>.
</p>

<div align="center">
<textarea style="height: 125px;">
#boxy {
	width: 100px!important;
}
#boxy {
	width: 200px;
}
</textarea></div>

<p>
Add !important with no spaces on either side between the <i>property</i> and <i>ending semicolon</i> to give it precedence over anything written below. Now #boxy has a width of 100 pixels.
</p>

<p>
So, now you know how CSS works, as well as HTML. But to design a nice-looking web page, you need to make them work <b>together</b>. You know how I said HTML was like a name tag? And throughout this section I've been labeling things <i>#boxy</i> and such? Labeling is very important, otherwise your browser doesn't know where to look in the HTML when it reads the CSS. That's where IDs and classes come into play.
</p>

<div class="article_listing">
Go back to <a href="#HTML_basics">HTML Basics</a>? - Move on to <a href="#ids_classes">IDs &amp; Classes</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="ids_classes" style="position: absolute;">

<img src="http://i51.tinypic.com/1jq2qb.png" class="header"><div class="box">

<h1>Ids &amp; Classes - The Glue</h1>

<p>
You now know about the two different components of coding: <b>HTML</b> and <b>CSS</b>, the foundation and the fancy. I'm going to stray a bit from my house metaphor to tell you that <i>ids and classes</i> are like glue: they stick HTML and CSS together. They are absolutely necessary... most of the time.
</p>

<p>
There <i>are</i> some elements of your page you can change without ever using an id or a class. For instance, even before you add <i>any</i> HTML, you can change the way <b>body</b> looks. Body is the background of your web page. All the content you add to your page will go on top of body. Think of it as a built-in canvas; even before you've started "painting," it's there.
</p>

<p>
By default, <b>body</b> is white. What if you want the background of your entire page to be <i>blue</i>, though? You can change that with CSS. 
</p>

<div align="center">
<textarea style="height: 65px;">
body {
	background: blue;
}
</textarea></div>

<p>
You can also be more specific. Lets say you wanted to target all of the text on your page. You could make it 12 pixels (tall), the font Verdana, and the color white.
</p>

<div align="center">
<textarea style="height: 125px;">
body {
	background: blue;
	font-size: 12px;
	font-family: Verdana;
	color: white;
}
</textarea></div>

<p>
You can also change <b>added elements</b> to your page without using ids or classes. For instance, say you added a <i>header (h1)</i> and a <i>paragraph (p)</i> to your page. You've already specified that your page's background should be blue, and what all the text should look like. But what if you just want the header - not the regular text - to have a dotted lower border, the color green? And what if you wanted to give the paragraph justified alignment and an indent of 15 pixels? You would use the following code:
</p>

<div align="center">
<textarea style="height: 425px;"><style>
body {
	background: blue;
	font-size: 12px;
	font-family: Verdana;
	color: white;
}
h1 {
	border-bottom: 1px dotted green;
}
p {
	text-align: justify;
	text-indent: 15px;
}
</style><h1>Welcome to my Page!</h1>

<p>
Here is just a paragraph of regular text... La la la la la, I'm really bad at writing filler, have we spilled over onto the second line yet? Cool.
</p>
</textarea></div>

<p>
Voila! Now, every <b>h1</b> and <b>p</b> on your page will have specific styles. Nifty, eh?
</p>

<p>
So, then, if we're doing just fine so far <i>without</i> ids and classes, what's all this labeling and name-tagging about, anyway? Why do we need them? For simplicity's sake, we'll start with <b>ids</b>.
</p>

<p>
The name itself is pretty self-explanatory: an HTML <b>id</b> is equivalent to the real-world meaning of "ID," meaning <i>identification</i>. If you give an element an id, it's like assigning it a specific name. Nothing else on the page can be that id; it's unique. 
</p>

<p>
Making certain HTML elements unique is very useful. Continuing with the sample code we've been using, let's say I added another paragraph to my page. I want this <i>particular</i> paragraph to have an indent of 20 pixels, however. If I want this new paragraph to have different characteristics than the existing paragraph, I have to differentiate between the two.
</p>

<div align="center">
<textarea style="height: 605px;"><style>
body {
	background: blue;
	font-size: 12px;
	font-family: Verdana;
	color: white;
}
h1 {
	border-bottom: 1px dotted green;
}
p {
	text-align: justify;
	text-indent: 15px;
}
#special_paragraph {
	text-indent: 20px;
}
</style><h1>Welcome to my Page!</h1>

<p>
Here is just a paragraph of regular text... La la la la la, I'm really bad at writing filler, have we spilled over onto the second line yet?
</p>

<p id="special_paragraph">
This is a second paragraph. Every paragraph on my page will have an indent of 15 pixels, except this one, because I gave it an id and used that to write out separate CSS for this paragraph.
</p>
</textarea></div>

<p>
As shown, you add <i>id="namehere</i> to the HTML and <i>#namehere</i> to the CSS. You can add an id to basically any HTML element: paragraphs, headers, divs, tables, images, etc.
</p>

<p>
<b>Classes</b> are basically the same thing, only they can be used to describe multiple things. In the HTML, you'd put <i>class="namehere</i> and in the CSS you'd put <i>.namehere</i>. For example:
</p>

<div align="center">
<textarea style="height: 565px;"><style>
p {
	text-align: justify;
	text-indent: 15px;
}
.special_paragraph {
	text-indent: 20px;
}
</style><p>
Here is just a paragraph of regular text... La la la la la, I'm really bad at writing filler, have we spilled over onto the second line yet?
</p>

<p>
Here's another paragraph of regular text... La la la la la, I'm really bad at writing filler, have we spilled over onto the second line yet?
</p>

<p class="special_paragraph">
This is one of the special paragraphs. Instead of having an indent of 15 pixels, it will have an indent of 20 pixels.
</p>

<p class="special_paragraph">
This is another special paragraph. Instead of having an indent of 15 pixels, it will have an indent of 20 pixels.
</p>
</textarea></div>

<p>
Now every paragraph has an indent of 15 pixels, except for the two <i>.special_paragraph</i>s, which both have an indent of 20 pixels.
</p>

<p>
You can also use classes and ids <b>together</b> to save character space. Let's move away from the whole paragraph thing (because it's getting a bit confusing) and say that you want all of the .boxes to have a width of 100 pixels, a height of 200 pixels, and a green background - but you want the <i>last</i> one to have a black border as well, 1 pixel wide. You would put:
</p>

<div align="center">
<textarea style="height: 265px;"><style>
.boxes {
	width: 100px;
	height: 200px;
	background: green;
}
#bordered {
	border: 1px solid black;
}
</style><div class="boxes"> Content here... </div>
<div class="boxes"> Content here... </div>
<div class="boxes" id="bordered"> Content here... </div>
</textarea></div>

<p>
That takes up less space than adding <i>width: 100px;</i>, <i>height: 200px;</i>, and <i>background: green;</i> to <b>#bordered</b> - and sometimes, every character counts.
</p>

<p>
Although CSS <i>can</i> be used without either, <b>classes</b> and <b>ids</b> are a crucial part of merging HTML and CSS - and, subsequently, designing your web page. Classes and ids are absolutely <i>essential</i> when you position elements to give your page that structure I was talking about earlier. Also essential to making a structured layout: knowledge of <b>divs</b>.
</p>

<div class="article_listing">
Go back to <a href="#CSS_basics">CSS Basics</a>? - Move on to <a href="#divs_positioning">Divs &amp; Positioning</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="divs_positioning" style="position: absolute;">

<img src="http://i52.tinypic.com/2la8u4j.png" class="header"><div class="box">

<h1>Divs &amp; Positioning</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#ids_classes">IDs &amp; Classes</a>? - Move on to <a href="#compatibility">Browser Compatibility</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="compatibility" style="position: absolute;">

<img src="http://i55.tinypic.com/2lsi05c.png" class="header"><div class="box">

<h1>Browser Compatibility</h1>

<p>
Let's start this section by talking about <b>web browsers</b>.
</p>

<p>
A browser is a computer program - like Notepad, or Photoshop. Like Notepad (a text editor) and Photoshop (an image editor), a browser has a special purpose. Its purpose is to <i>interperet</i> Internet pages.
</p>

<p>
Think of the Internet as a selection of files, like you would have on your computer, only the Internet's files are available to every computer (with an Internet connection). When you go to a web page, you're calling up a specific file somewhere on the web. The browser that you use enables you to see that file.
</p>

<p>
If you think of a simple Word document, for example, it's not very aesthetically pleasing - just text. On the Internet, to make the information look "good," HTML and CSS are used. They speak the browser's language, and they tell the browser to show the viewer (you) things in a certain way. So even though all you do is input lines of text when you create a web page, when you view it, the browser will display it according to the HTML and CSS commands. 
</p>

<p>
There are many, many different browsers available to view the web. In theory, they should all interpret HTML and CSS the same way. In <i>practice</i>, however, there are tons of discrepancies - some trivial, others huge. If you're designing a web page, you want it to look nice to everyone, so you should try and get your layout to work in as many browsers as you can. 
</p>

<p>
But multitude of browsers out there, how can you possibly edit your page and make it work in all of them? Quite simply, you can't. But the only ones you <i>really</i> have to worry about are <b>Internet Explorer</b> and <b>Firefox</b>.
</p>

<p>
<b>Internet Explorer</b>, as most coders would agree, is the most troublesome of browsers. Consistently, IE disregards HTML/CSS standards, displaying things differently than it should. But IE is also the most popular web browser used today - simply because it is the default browser for Windows, and most people use Windows. And of the billions of people who use the Internet, only a small percentage know that there are other options besides Internet Explorer.
</p>

<p>
<b>Firefox</b> is the browser that you <i>should</i> be using. It's available for both Windows and Mac, and it can be downloaded for <i>FREE</i> off of the official Mozilla website. It's a lot more secure than Internet Explorer, and it also displays coding correctly (every browser has it's little quirks, but, comparatively, Firefox is incredibly accurate). Firefox is the second most used browser on the Internet. If it works in Firefox, it probably works in most other widely used browsers (which is why its IE and FF you have to worry about).
</p>

<p>
Some other browsers of note are <b>Chrome</b>, <b>Safari</b>, and <b>Opera</b>. Safari is the default browser for Mac users, like IE is the default for Windows users. Chrome interprets coding exactly like Safari (I think; in my experience I've never seen any differences between the two). I personally think Opera is somewhere in between IE and FF - in some ways it acts like one, in other ways it acts like the other. That can get annoying at times, but of the five browsers I've mentioned, it's the least popular, so a lot of the time I kind of just... give up, and accept that I can't make things look right in Opera. XD
</p>

<p>
Now that we've learned a bit about browsers, lets explore some of the major IE/FF discrepancies. 
</p>

<br><p>
I guess you'll be doing that sometime in the future, because unfortunately this section is <i>unfinished</i>... Sorry. =(
</p>

<div class="article_listing">
Go back to <a href="#divs_positioning">Divs &amp; Positioning</a>? - Move on to <a href="#off_neopets">Off Neopets</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="off_neopets" style="position: absolute;">

<img src="http://i53.tinypic.com/o6fte8.png" class="header"><div class="box">

<h1>Off Neopets</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#compatibility">Browser Compatibility</a>? 
<br><a href="#general">Back to General Knowledge article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="in_depth" style="position: absolute;">

<img src="http://i55.tinypic.com/ric22f.png" class="header"><div class="box">

<h1>In-Depth Articles</h1>

<p>
Hey there. In this section of the guide, you'll find articles that explore in more detail some elements of coding I (may have) touched on in the <a href="#general">General Knowledge</a> section. You can learn about tables, images, lists, and links (and boy, is that a packed section), plus there are some "userlookup specific" and "petpage specific" tips and tricks as well. You can read these in any order, really.
</p>

<p>
Anyway, here they are: 
</p>

<div class="article_listing">
<a href="#tables">Tables</a> -
<a href="#images">Images</a> -
<a href="#lists">Lists</a> -
<a href="#links">Links</a> -
<a href="#ul_specific">Userlookup Specific</a> -
<a href="#pp_specific">Petpage Specific</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="tables" style="position: absolute;">

<img src="http://i55.tinypic.com/j9t4xw.png" class="header"><div class="box">

<h1>Two Types of Tables</h1>

<p>
As far as this guide is concerned, there are <b>two</b> types of tables: <i>actual</i> tables - as in HTML tables that are officially known as tables, the tags being "table" and "/table" - and what I like to call floating or "fake" tables, which use <b>divs</b> and CSS floating. (Want to read up on that? Go to the <a href="#divs_positioning">Divs &amp; Positioning</a> section.)
</p>

<p>
Let's look at actual tables first.
</p>
<p>

</p>
</div>


<div class="box">

<h1>Actual Tables</h1>

<p>
An HTML <b>table</b> looks something like this:
</p>

<div align="center">
<table border="1"><tr><td>Td 1</td>
<td>Td 2</td>
</tr><tr><td>Td 3</td>
<td>Td 4</td>
</tr></table></div>

<p>
The basic code for a table is as follows:
</p>

<div align="center">
<textarea style="height: 125px;"><table><tr><td>Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>   </tr></table></textarea></div>

<p>
The whole code is enclosed in the <b>table</b> and <b>/table</b> tags; on each line inside you see <i>tr</i> and <i>/tr</i> ("tr" stands for "table row"), and inside each table row you see <i>td</i> and <i>/td</i> ("td" stands for "table data") enclosing the text that will show up.
</p>

<p>
Now, if you just stick that code onto a web page, it won't look very nice.
</p>

<div align="center"><table><tr><td>Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>   </tr></table></div>

<p>
You can't even see where one td ends and the next begins! To fix this, you can add things like backgrounds (<i>bgcolor</i>), borders (<i>border</i>, <i>bordercolor</i>), etc., in your HTML. But as demonstrated in the first table I showed you, which I gave a border to... <b>HTML</b> table styles don't look super nice. You should control borders, coloring, and really most things in your <b>CSS</b>, by giving your tables, table rows, and/or table data boxes <a href="#ids_classes">IDs and classes</a>.
</p>

<p>
<b>However</b>, there are three HTML codes that you <i>can't</i> include in your CSS: colspan, rowspan, and cellspacing. Let's look at <i>colspan</i> first:
</p>

<div align="center">
<textarea style="height: 125px;"><table><tr><td colspan="2">Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>  <td>Box #5</td>   </tr></table></textarea></div>

<p>
In this example, I want Box #1 to be the width of Box #3 and Box #4 combined. I've added borders to the following table to show you the boxes:
</p>

<div align="center"><table border="1"><tr><td colspan="2">Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>  <td>Box #5</td>   </tr></table></div>

<p>
<i>Rowspan</i> works very similarly:
</p>

<div align="center">
<textarea style="height: 125px;"><table><tr><td rowspan="2">Box #1</td> <td>Box #2</td> <td>Box #3</td>  </tr><tr><td>Box #4</td> <td>Box #5</td>  </tr></table></textarea></div>

<br><div align="center"><table border="1"><tr><td rowspan="2">Box #1</td>  <td>Box #2</td>  <td>Box #3</td>   </tr><tr><td>Box #4</td>  <td>Box #5</td>   </tr></table></div>

<p>
Notice how there are spaces in between the boxes. That's just the table trying to be helpful (things are easier to read when spaced out, right?). Unfortunately, those little spaces can be <i>very</i> annoying when you add CSS styles. You can't get rid of them in your CSS, so you have to use <b>cellspacing</b>.
</p>

<div align="center">
<textarea style="height: 125px;"><table cellspacing="0"><tr><td>Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>   </tr></table></textarea></div>

<br><div align="center"><table cellspacing="0" border="1"><tr><td>Box #1</td>  <td>Box #2</td>   </tr><tr><td>Box #3</td>  <td>Box #4</td>   </tr></table></div>

<p>
Some other things you should know before moving on to styling your table with CSS: Text inside a table <i>does not</i> follow the text styles already specified on your page. For example, even if you have <b>body {color: white;}</b> in your CSS, turning all of body's text white, any text inside a table will be the default black. 
</p>

<p>
Text inside a table will also be aligned a certain way; it's <i>horizontal alignment</i> will be <b>left</b>, and it's <i>vertical alignment</i> will be <b>middle</b>.
</p>

</div>


<div class="box">

<h1>Floating/"Fake" Tables</h1>

<p>
I guess you'll be learning about those sometime in the future...
</p>

</div>


<div class="box">

<h1>In summary</h1>

<p>
It's important to know how to deal with actual tables, as they still feature prominently in the official Neopets layout. Just look at the source code for your userlookup - all the modules are made up of tables within tables. And even if you're not structuring your layout with tables (you <b>shouldn't</b>, it's deprecated and just annoying), they're helpful for... tabular things. XD
</p>

<p>
In my personal experience, I almost never use tables in layouts. The one exception is probably this here guide - I used HTML tables for the <a href="#HTML_tags">HTML Tags</a> and <a href="#CSS_codes">CSS Codes</a> sections. But in cases where you don't need defined rows and columns (check out how I display my layout screenshots and codes on my <a href="/~1xx_vo_spader_xx1#graphic">premades page</a>), definitely use the floating method instead. 
</p>

<div class="article_listing">
Move on to <a href="#images">Images</a>? 
<br><a href="#in_depth">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="images" style="position: absolute;">

<img src="http://i55.tinypic.com/20usqhy.png" class="header"><div class="box">

<h1>Images</h1>

<p>
Seeing as this is a <i>coding</i> guide, I'm not going to go into image-making. Let's just assume that you know how to make graphics in an image editor (such as GIMP or Paint or Photoshop; check under <a href="#other_resources">Other Resources</a> for guides). This section is all about how to get that image file saved on your computer onto the internet and into your coding.
</p>

<p>
Once you've created your image, your first step is to upload it to the Internet. To do this, you have to find an <b>image host</b> - I recommend <i>tinypic(dot)com</i>, <i>imageshack(dot)us</i>, or <i>photobucket(dot)com</i>. Make sure you grab the direct link (for layouts) from the selection of URLs they give you.
</p>

<p>
Now, for the code; the HTML for the following image will be shown underneath it.
</p>

<div align="center">
<img src="http://i54.tinypic.com/nwaqf.png"></div>

<div align="center">
<textarea style="height: 25px;"><img src="http://i54.tinypic.com/nwaqf.png"></textarea></div>

<p>
So the image code model would be:
</p>

<div align="center">
<textarea style="height: 25px;"><img src="/url.png"></textarea></div>

<p>
<b>Img</b> is the tag, and <i>src</i> is a NECESSARY attribute. Without "src='url'", there would be no image. That line of code tells the browser to go look up the image from a certain online directory (in this case, tinypic's).
</p>

<p>
As you may have experienced, however, sometimes the browser takes a long time to look up the image. In the image's place, sometimes you're left with the broken image icon (different for every browser) or just a blank space. If your page is image-heavy, or a specific image is large and may take some time to load, you can add <b>alternate text</b> - text that will show up in place of the image. Alternate text will also show up if your image is <i>broken</i>, or the browser simply can't find it anywhere on the Internet (check for URL mistypings). 
</p>

<p>
Anyways, here's my broken image with its alternate text, and the code is underneath it.
</p>

<div align="center">
<img src="/url.png" alt="This text is showing up because the image is broken."></div>

<div align="center">
<textarea style="height: 25px;"><img src="/url.png" alt="your alternate text"></textarea></div>

<p>
If you're using IE (Internet Explorer), when you hover over an image, you see the alternate text in a little bubble - go ahead, try it. That isn't supposed to happen; in most other browsers, to achieve that effect, you need to use <b>title</b>. Observe:
</p>

<div align="center">
<img src="/blah.png" alt="This text is showing up because the image is broken." title="This text is showing up because your mouse is hovering over the image."></div>

<div align="center">
<textarea style="height: 25px;"><img src="/url.png" alt="alternate text" title="hover text"></textarea></div>

<p>
You see the alternate text right away, but you see the hover text, or title, when you hover over the broken image (works for non-broken images, too). Notice, IE users, how the title takes precedence over the alternate text (a fancy way of saying that the title shows up instead of the alternate text, if there is one). 
</p>

<p>
But that's not <i>all</i> you can do with images in HTML.
</p>

<p>
You can also set the height and width for images. This is useful if you have an image-heavy page; the page grows in length as each image loads. If you set the height and width, the page's size won't change (to the delight of viewers with slow Internet connections).
</p>

<div align="center">
<img src="/blah.png" height="100" width="100"></div>

<div align="center">
<textarea style="height: 25px;"><img src="/url.png" height="0" width="0"></textarea></div>

<p>
If you just put a number, like 50, the browser reads it as "50 pixels". You can add a <b>%</b> sign, changing it to 50% of the container's width/height.
</p>

<p>
Hyperlinked images automatically have an ugly blue border (or a different color, depending on your page's link styles). To prevent any of your hyperlinked images from having a border, use this code in your page's CSS
</p>

<div align="center">
<textarea style="height: 65px;">
a img {
	border: none;
}</textarea></div>

<p>
However... Let's say you have a link back button, like I do for this page. It's a hyperlinked image - the idea is that somebody will copy the linked image code and put it on their page. But what if they don't have that code in their CSS? Your link will have an ugly border on their page (which is just the kind of thing that bothers neurotic people like me). You can remedy that by changing the <b>border width</b> in the HTML of your image. Watch:
</p>

<div align="center">
<a href="/somepage.phtml"><img src="http://i54.tinypic.com/nwaqf.png" style="border: 2px solid blue;"></a> to <a href="/somepage.phtml"><img src="http://i54.tinypic.com/nwaqf.png"></a>
</div>

<div align="center">
<textarea style="height: 25px;"><a href="/url"><img src="/blah.png" border="0"></a></textarea></div>

<p>
There are some other things you can do in the HTML of images, but they're what we call <i>deprecated</i>, meaning they've been rendered obsolete by the introduction of CSS (you're supposed to use CSS instead now).
</p>

<p>
You can give images classes and ids, so that you can control them in your CSS. From your CSS, you can position them absolutely, give them fancy borders, give them hover effects, etc., etc. I won't go into detail now - there are so many CSS codes - but you get the idea.
</p>

<p>
You can also set images as backgrounds in your CSS by using the code <b>background-image</b>. 
</p>

<div align="center">
<textarea style="height: 65px;">
body {
	background-image: url("urlofimagehere.png");
}</textarea></div>

<p>
Learn more about what you can do with backgrounds in the <a href="#cssref">CSS codes</a> section.
</p>

<p>
Aaaand... that's about it, really. Now you know all you'll ever need to know (probably) about how to involve images in your coding.
</p>

<div class="article_listing">
Go back to <a href="#tables">Tables</a>? - Move on to <a href="#lists">Lists</a>? 
<br><a href="#in_depth">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="lists" style="position: absolute;">

<img src="http://i55.tinypic.com/ju7od5.png" class="header"><div class="box">

<h1>Lists</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#images">Images</a>? - Move on to <a href="#links">Links</a>? 
<br><a href="#in_depth">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="links" style="position: absolute;">

<img src="http://i55.tinypic.com/206ou9h.png" class="header"><div class="box">

<h1>So many links, so little space...</h1>

<p>
I have a <i>lot</i> of information to offer you on links, so I've divided this section into several smaller sections: link basics, external vs. internal, block links, and image rollover navigation. List navigation also kind of falls under this category (the lovely popup menus I have over on the left there), but I figured I'd put that in the <a href="#lists">Lists</a> section just to even things out. 
</p>

<p>
So, let's begin!
</p>

</div>

<div class="box">

<h1>Link Basics</h1>

<p>
Most, if not all, pages on the web have links in some form. On all of the editable Neopets pages except for petpages, you have to keep the topbar links, and on petpages it's technically required to keep the referral bar at the top and the copyright information and links at the bottom somewhere on your page. It's not required to have linkage on pages outside of Neopets, but sites do because - let's face it - the average Internetgoer is simply too lazy to type in a new URL or hit the back button to get to a different page.
</p>

<p>
Links are essential to... well... link sites together. Having pretty, stylized links can help make your page look polished and sophisticated, two of my favorite words when it comes to web design.
</p>

<p>
The basic HTML tag for links is simple enough.
</p>

<div align="center">
<textarea style="height: 25px;"><a href="/url/">hyperlinked text</a></textarea></div>

<p>
Notice the opening <b>a</b>, <i>href="URL",</i> the <a href="/somepage.phtml">hyperlinked text</a>, and the closing <b>/a</b>. The <i>hyperlinked text</i> is a fancy way of referring to the words (or image) that the viewer clicks on. 
</p>

<p>
Now you paste that code onto whatever page you want to add the link to. If the link style hasn't yet been specified, this is what you'll get:
</p>

<style>
a.example1 {
	color: blue;
	font-weight: normal;
	text-decoration: underline;
}
a.example1:active {
	color: red;
}
a.example1:visited {
	color: purple;
}
</style><div align="center">
<a href="#randimosity" class="example1">Linky</a>
</div>

<p>
Not very pretty, is it? Like white is a page's default background color, this is the default link style.
</p>

<p>
Now I'm going to change the colors slightly, to demonstrate the different <i>pseudoclasses</i> of "a." The following link corresponds to the CSS code underneath it:
</p>

<style>
a.example2 {
	color: blue;
	font-weight: normal;
	text-decoration: underline;
}
a.example2:visited {
	color: purple;
}
a.example2:active {
	color: red;
}
a.example2:hover {
	color: green;
}
</style><div align="center">
<a href="#randimosity2" class="example2">Linky</a>
</div>

<div align="center">
<textarea style="height: 245px;">
a:link {
	color: blue;
}
a:visited {
	color: purple;
}
a:active {
	color: red;
}
a:hover {
	color: green;
}</textarea></div>

<p>
So, as you can see: <b>a:link</b> is how the link will look <i>just as it is</i> on the page; <b>a:visited</b> is how the link will look if your browser recognizes it (meaning you've <i>visited the page recently</i>); <b>a:active</b> is how the link will look if you're in the <i>process of clicking it</i> or if the browser is in the process of moving to the new page; and <b>a:hover</b> is how the link will look when your mouse <i>hovers over</i> it.
</p>

<p>
As you can probably see, these are garish colors. Generally you'd change the colors to match your layout theme. Usually, people make a:link, a:visited, and a:active all the same color (or style) - or very close colors (or styles). Hover effects are at their most effective when there's a big difference between a:link (etc.) and a:hover.
</p>

<p>
So, the coding for those better-looking links would look like this (using the spiffy combining demonstrated in the <a href="#CSS_basics">CSS basics</a> section)... right?
</p>

<div align="center">
<textarea style="height: 125px;">
a:link, a:visited, a:active {
	color: blue;
}
a:hover {
	color: aqua;
}</textarea></div>

<p>
Yes, this coding would have the desired effect: <b>a:link</b>, <b>a:visited</b>, and <b>a:active</b> would all have one color and <i>a:hover</i> would have a different one. But there's a much quicker and cleaner way to do this, and this other method saves character space.
</p>

<p>
You know how I keep saying <i>pseudoclasses</i>? Well, a pseudoclass is like... an extra, an add-on. Like... a sub-selector. The <b>official</b> selector for links is simply <i>a</i>. All the pseudoclasses define more specific things inside the selector (in this case, <i>a</i>). That's why they all start with colons (<b>:</b>).
</p>

<p>
You'll notice that the majority of pseudoclasses all have the same styles, so we'll replace the line <b>a:link, a:visited, a:active</b> with just <i>a</i>.
</p>

<div align="center">
<textarea style="height: 65px;">
a {
	color: blue;
}</textarea></div>

<p>
This makes all of the links a uniform blue, regardless of if they're just sitting there, they've been clicked on, you've visited the pages recently, or you have your mouse hovering over them.
</p>

<div align="center">
<textarea style="height: 125px;">
a {
	color: blue;
}
a:hover {
	color: aqua;
}</textarea></div>

<p>
Since we've specified <b>a:hover</b>, all of the links will be blue all the time, <i>except</i> when you hover over them.
</p>

<p>
Now that we've learned how to code links, let's focus on where they're linked to. 
</p>

</div>


<div class="box">

<h1>External vs. Internal</h1>

<p>
There are two kinds of links: external and internal. An <i>external</i> link is what you see most often. It links you to a totally different page, like <a href="/random.phtml">this link</a>.
</p>

<p>
Anyway, let's brush up on the anatomy of a URL, shall we?
</p>

<div align="center">
<textarea style="height: 25px;">
//www.neopets.com/folder/page.phtml</textarea></div>

<p>
The <b>http</b> is what's known as the protocol, and <b>www.neopets.com</b> is the domain name. You need that whole thing if the domain name of the site you're putting the link on is different from the domain name of the site you're linking to. (You don't have to worry about that, though, because on Neopets, you can <i>only</i> link to Neopets pages.)
</p>

<p>
In general on the web, if the two pages are part of the same site (so have the same domain names), you can take out <b>//www.neopets.com</b>, leaving the rest. For instance, this page has the Neopets domain. If I wanted to link to my premades page, another page on the Neopets domain:
</p>


<div align="center">
<textarea style="height: 185px;">
//www.neopets.com/~1xx_vo_spader_xx1

would change to:

/~1xx_vo_spader_xx1

so the final link code would look like:

<a href="/~1xx_vo_spader">Premades</a></textarea></div>

<p>
You can also link <i>internally</i>, directing your viewer to different parts of your page - without any scrolling on their part - with just the click of a button. 
</p>

<p>
There are two different ways to link internally. My preferred method involves <b>ids</b>. Let's say you already have a header on your petpage, with the creative id of <b>#header</b>. It's towards the bottom of your page, and you'd have to scroll down a <i>looong</i> way to get to it. So, you decide to put an internal link at the top of your page. It looks like:
</p>

<div align="center">
<textarea style="height: 25px;"><a href="/~PetsPage#header">Go to Header</a></textarea></div>

<p>
You can shorten that even further, however; because the URL of the page you put the link on is <i>exactly</i> the same as where you're linking to (it's part of the same page), not only can you erase the "www.neopets.com," you can erase the part that has your pet's name as well, leaving you with:
</p>

<div align="center">
<textarea style="height: 25px;"><a href="#header">Go to Header</a></textarea></div>

<p>
So, just to recap, the finished product looks like:
</p>

<div align="center">
<textarea style="height: 205px;"><a href="#header">Go to Header</a>

Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 

<h1 id="#header">This is the Header Text</h1></textarea></div>

<p>
Now, when the viewer clicks the link at the top, it'll take them all the way down the page to the header.
</p>

<p>
Pretty neat, huh?
</p>

<p>
Unfortunately, I've found that this method doesn't always work. Why? I really have no idea. I find it a lot easier, but the more traditional method - that is, the method that I believe most sites with internal navigation use - involves <i>naming</i> things.
</p>

<p>
Basically, instead of id'ing the header, you insert the following code right before it:
</p>

<div align="center">
<textarea style="height: 25px;"><a name="header"></a></textarea></div>

<p>
Make sure you don't put any text in between the opening and closing "a" tags! Now the finished product looks like:
</p>

<div align="center">
<textarea style="height: 225px;"><a href="#header">Go to Header</a>

Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content... 
Page content... Page content... Page content... Page content...  

<a name="header"></a>
<h1>This is the Header Text</h1></textarea></div>

<p>
This next part is going to be a bit hard to explain, but I'll try, anyway. Think of the <b>a name</b> code as a little invisible dot on your page. If you inserted the code just as I showed you, the dot will become part of the natural flow of the page. If your header has no top margin, than the dot will be right above it, so when you click on the link it'll take you right to the header.
</p>

<p>
If your header has a top margin of 100 pixels or something, though, than that little dot will be pushed 100 pixels above the header. Then when you click the link, you'll find yourself with 100 pixels of space above the header that you were trying to get to.
</p>

<p>
Anyway, my point is that if you want that little dot to be in a specific place, you may need to put it inside a div and <a href="#divs_positioning">position it</a> accordingly.
</p>

<p>
So, now you have your pretty internal links! You're all set to put your site's navigation in a neat little sidebar, like I have here. But what's this? Your internal links link somewhere special, but look the same as <i>ordinary</i> links? If you want a fancy sidebar, you're going to have to check out the <i>block navigation</i> section below.
</p>

</div>


<div class="box">

<h1>Block Links</h1>

<p>
Customizing your links gives your page a polished, sophisticated feel (as I mentioned in the above section). However... most <i>good-looking</i> sites have a navigation bar, or navigation that stands out. Basic link styles are great for <a href="/somepage.phtml">casual links</a> that you slip into your text, but having some form of stand-out navigation adds a note of professionalism to your web page that regular links alone just can't.
</p>

<p>
To make these <b>block links</b>, you need to first set up the HTML before we can add pretty styles. The obvious way to do so (so that the links are on top of one another) would be this:
</p>

<div align="center">
<textarea style="height: 85px;"><a href="/url">Link</a>
<br><a href="/url">Link</a>
<br><a href="/url">Link</a>
<br><a href="/url">Link</a></textarea></div>

<p>
But that's actually <i>not</i> how we're going to do it. Instead, we'll try the following.
</p>

<div align="center">
<textarea style="height: 125px;"><div id="blocklinks">
<a href="/url">Link</a>
<a href="/url">Link</a>
<a href="/url">Link</a>
<a href="/url">Link</a>
</div></textarea></div>

<p>
It doesn't look too special now - in fact, the links are even all on the same line. It literally looks like this once you plug that code onto your page:
</p>

<div align="center">
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
</div>

<p>
To make them pretty, we have to work with CSS.
</p>

<p>
First and foremost, we have to add the line <b>display: block;</b>. By default, links are inline elements, so we need to tell our browser otherwise and make it a block element; they are called <i>block links</i>, after all. (The difference between block and inline is explained back in <a href="#divs_positioining">Divs &amp; Positioning</a>.)
</p>

<p>
But where do we add this, you ask? Well, to select the links inside the div (id'ed <b>blocklinks</b>), we use <i>#blocklinks a</i> in the CSS. Observe:
</p>

<div align="center">
<textarea style="height: 225px;"><style>
#blocklinks a {
	display: block;
}
</style><div id="blocklinks">
<a href="/url">Link</a>
<a href="/url">Link</a>
<a href="/url">Link</a>
<a href="/url">Link</a>
</div></textarea></div>

<p>
Now, your links look like this:
</p>

<div align="center">
<style>
#exp1 a {
	display: block;
}
</style><div id="exp1">
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
</div>
</div>

<p>
Now, you have to add all of the other styles you want your block links to have. You can set a width if you want, like I did in the example below, but if you don't set a width, the links will automatically be the same width as the <i>container</i> or <i>parent element</i> -  just like ordinary block elements, such as <a href="#divs_positioning">divs</a>.
</p>

<div align="center">
<textarea style="height: 245px;">
#blocklinks a {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}</textarea></div>

<p>
Those are my styles. Following those styles, my links look like:
</p>

<div align="center">
<style>
#exp2 a {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}
</style><div id="exp2">
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
</div>
</div>

<p>
Now, <i>everybody</i> loves hover effects... or at least most people do. To make hover effects, use <b>#blocklinks a:hover</b> like so:
</p>

<div align="center">
<textarea style="height: 305px;">
#blocklinks a {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}
#blocklinks a:hover {
	background: blue;
}</textarea></div>

<p>
My links now look like:
</p>

<div align="center">
<style>
#exp3 a {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}
#exp3 a:hover {
	background: blue;
}
</style><div id="exp3">
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
<a href="/url"> Link </a>
</div>
</div>

<p>
Although I find that the easiest way to do it, there is another one that I know of. The HTML is different - it uses classes.
</p>

<div align="center">
<textarea style="height: 85px;"><a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a></textarea></div>

<p>
There isn't a containing div this time, so we have to select the links differently in the CSS. Instead of using <b>#blocklinks a</b>, we'll use <i>a.nav:link, a.nav:visited, a.nav:active</i> (that whole phrase). We SHOULD only have to put <i>a.nav</i>, but for some reason it doesn't always work... You can try it, maybe the filters have changed since I originally wrote this section of the guide. XD
</p>

<p>
Then, for the hover effects, we use <b>a.nav:hover</b>.
</p>

<div align="center">
<textarea style="height: 425px;"><style>
a.nav:link, a.nav:visited, a.nav:active {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}
a.nav:hover {
	background: blue;
}
</style><a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a>
<a href="/url" class="nav">Link</a></textarea></div>

<p>
The links end up looking exactly the same.
</p>

<div align="center">
<style>
a.exp4:link, a.exp4:visited, a.exp4:active {
	display: block;
	width: 100px;
	background: gray;
	border: 1px solid green;
	color: white;
	font-weight: bold;
	text-decoration: none;
	padding: 3px;
	margin: 3px;
	text-align: center;
}
a.exp4:hover {
	background: blue;
}
</style><a href="/url" class="exp4"> Link </a>
<a href="/url" class="exp4"> Link </a>
<a href="/url" class="exp4"> Link </a>
<a href="/url" class="exp4"> Link </a>
</div>

<p>
I highly recommend the first method; it takes up a <b>lot</b> less character space, and it's a lot neater (especially if your urls are long; by taking "class='nav'" out, there's less of a chance your link code will spill over onto a second line). I very rarely use the second method, but it does come in handy occasionally. 
</p>

<p>
In case you hadn't noticed, the colors I used for the above example are garish again - I'm sure you can come up with better. XD For an explanation of colors and hex codes, go to the <a href="#colors">correspondingly titled section</a>, and for a full list of styles you can use, check the <a href="#css_codes">CSS codes</a> section.
</p>

<p>
Next (and last!) up we have image rollover navigation, which is kind of an extension of block link coding.
</p>

</div>


<div class="box">

<h1>Image Rollover Navigation</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

</div>


<div class="box">

<h1>In Summary</h1>

<p>
So there you go, a whole lotta information on a whole lotta different kinds of links. Again, the list navigation section is placed under <a href="#lists">Lists</a> for balancing purposes; this section is already full enough. XD So... go off and make links!
</p>

<div class="article_listing">
Go back to <a href="#lists">Lists</a>? - Move on to <a href="#ul_specific">Userlookup Specific</a>? 
<br><a href="#general">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="ul_specific" style="position: absolute;">

<img src="http://i56.tinypic.com/2ib0sbk.png" class="header"><div class="box">

<h1>Userlookup Specific Tutorials</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#links">Links</a>? - Move on to <a href="#pp_specific">Petpage Specific</a>? 
<br><a href="#in_depth">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="pp_specific" style="position: absolute;">

<img src="http://i51.tinypic.com/25gunti.png" class="header"><div class="box">

<h1>Petpage Specific Tutorials</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#ul_specific">Userlookup Specific</a>? 
<br><a href="#in_depth">Back to In-Depth article listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="reference" style="position: absolute;">

<img src="http://i53.tinypic.com/10e4own.png" class="header"><div class="box">

<h1>Reference Pages</h1>

<p>
Whether or not you've found the <a href="#general">General Articles</a> and/or <a href="#in_depth">In-Depth Articles</a> helpful, there's still some great stuff in these reference pages. Learn some things about colors and hex codes, and maybe find a site with color schemes for you to use. Brush up on all the HTML tags you can use and CSS attributes you can play with.
</p>

<div class="article_listing">
<a href="#colors">Colors &amp; Hex Codes</a> -
<a href="#HTML_tags">HTML Tags</a> -
<a href="#CSS_codes">CSS Codes</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="colors" style="position: absolute;">

<img src="http://i53.tinypic.com/ojqv47.png" class="header"><div class="box">

<h1>Colors &amp; Hex Codes</h1>

<p>
Colors make your pages <b>fantabulous</b>. It isn't enough to just be able to code - to make it really look pretty, you have to utilize all the wonderful colors the visible light spectrum has to offer.
</p>

<p>
Sometimes, you can just write out the name of a color for it to show up. For instance, "red" makes <span style="color: red;">red</span>, "blue" makes <span style="color: blue;">blue</span>, etc. There are tons and tons of color words, but all but the most basic are kind of hard to memorize.
</p>

<p>
Every color also has a <i>hex code</i>. A hex code is six characters long, and is preceded in the coding by a <b>#</b>. Those six characters can be traditional number digits (<i>0-9</i>), certain letters (<i>A-F</i>), or - most often - a combination of the two.
</p>

<p>
Why the letters? Well, hex codes operate on a <b>base 16</b> system. You should all be familiar with the the base 10 system we use for numbers; the digits go up from 0 to 9 until we hit 10, meaning we move over to the left and start numbering again. Hex codes do the same thing, only the letters A-F count as extra <i>numbers</i>. It's a bit confusing to count using the base 16 system, but there's really no need to do that.
</p>

<p>
The <i>first two</i> digits in a hex code define how many parts <span style="color: red;">red</span> the color is (<b>FF</b> being the most, equaling 255; <b>00</b> being the least, equaling, well, 0). The <i>second two</i> digits define how many parts <span style="color: green;">green</span> the color is, and the <i>third two</i> digits define how many parts <span style="color: blue;">blue</span> the color is.
</p>

<p>
Because computer coloring works like colors from light (as opposed to colors from paint), <b>#FFFFFF</b> ends up being <i>white</i>, a combination of the most of every color. <b>#000000</b> is <i>black</i>, an absence of any color at all. #FF0000 is the brightest red, #00FF00 is the brightest green, and #0000FF is the brightest blue.
</p>

<p>
Confused? Well, don't worry about it. Though it's theoretically possible, very few people (if any) make all their hex codes from scratch. You can look at a <i>hex color chart</i>, like the ones that can be found on the pages below, to find your colors. 

</p>
<div style="margin: 15px; text-align: center;">
<a href="/~Triflot">Neocolors</a> -
<a href="/~KauSlippers">Fishslipper's Color Codes</a> -
<a href="/~niesean99449">Bubbles Colour Charts</a> -
<a href="/~1xx_vo_spader_xx1#resources">Chromatic</a> -
<a href="/~thatkillsme#co">That Kills Me</a>
</div>

<p>
You could also use a <i>color picker</i>, a really cool interactive thing that allows you to find the exact shade of a color you want. You can search for one of those online if your image editor doesn't have one (like Photoshop does).
</p>

<p>
In most of my demonstrations, I refer to the color choices I make as <i>garish</i>. That's because I tend to choose widely contrasting colors so you can easily see what code corresponds to what. Here's a tip: <b>don't</b> do that when actually coding something. It looks... bad. Choose colors that actually work well together.
</p>

<p>
If you're using an image for a layout (or even if you're not, but you're modeling your CSS off an image), and you have a nifty color picker in your image editing program, find colors from your image and turn them into a color scheme. If you don't have one of those, look at the pages listed above - some of them are up there because they offer premade color <i>schemes</i> instead of (or in addition to) color charts. 
</p>

<div class="article_listing">
Move on to <a href="#HTML_tags">HTML Tags</a>? 
<br><a href="#reference">Back to Reference pages listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="HTML_tags" style="position: absolute;">

<img src="http://i54.tinypic.com/2u6gowl.png" class="header"><div class="box">

<h1>HTML Tags Master list</h1>

<p>
Here you go, a master list of all the HTML tags that can be used on Neopets. Several important attributes are included as well, but only those that make sense (for instance, if it can be added more efficiently with CSS, it's not included). Remember, an HTML code looks like this:
</p>

<div align="center">
<textarea style="height: 105px;"><font face="Verdana">Enclosed content</font>
or
<font face="Verdana" color="red">Enclosed content</font>
or just
<img src="/url.png" border="0"></textarea></div>

<p>
<b>font</b> and <b>img</b> are <i>tags</i>; <b>face</b>, <b>color</b>, and <b>border</b> are <i>attributes</i>; <b>Verdana</b>, <b>red</b>, and <b>0</b> are <i>values</i>.
</p>

<p>
To learn more about HTML coding in general, go to the <a href="#HTML_basics">HTML Basics</a> section.
</p>

</div>


<div class="box">

<h1>General Attributes</h1>

<p>
You can add these to pretty much every HTML tag. Versatile, eh?
</p>

<table cellspacing="0" class="reference_table" id="rt1"><tr class="col_title"><td class="attrib">Attribute</td>
<td class="desc">Description</td>
</tr><tr class="row_content_1"><td class="attrib">class</td>
<td class="desc">Gives the element a class name.</td>
</tr><tr class="row_content_2"><td class="attrib">id</td>
<td class="desc">Gives the element an id name.</td>
</tr><tr class="row_content_1"><td class="attrib">style</td>
<td class="desc">Adds inline styles.</td>
</tr><tr class="row_content_2"><td class="attrib">title</td>
<td class="desc">Adds a tooltip (hover text).</td>
</tr></table></div>


<div class="box">

<h1>Tags &amp; their specific attributes</h1>

<table cellspacing="0" class="reference_table" id="rt2"><tr class="col_title"><td class="tag">Tag</td>
<td class="notes">Description</td>
<td class="display">Display</td>
<td class="attribs">Attributes</td>
<td class="ex">Example</td>
</tr><tr class="row_content_1"><td class="tag">
a
</td>
<td class="notes">
Adds a link to the page. Go <a href="#links">here</a> for more information.
</td>
<td class="display">
Inline
</td>
<td class="attribs">
<i>ferh</i> spelled in reverse, allows you to link to a URL or page anchor<br><i>name</i> allows you to mark a page anchor
</td>
<td class="ex">
<a href="#link" style="color: blue; font-weight: normal; text-decoration: underline;">Click me!</a>
</td>
</tr><tr class="row_content_2"><td class="tag">
b
</td>
<td class="notes">
Makes your text bold.
</td>
<td class="display">
Inline
</td>
<td class="attribs">
</td>
<td class="ex">
<span style="font-weight: bold;">Bold text.</span>
</td>
</tr><tr class="row_content_1"><td class="tag">
br
</td>
<td class="notes">
Adds a line break (like hitting "enter" or "return" on a keyboard). No closing tag.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>clear</i> stops text wrapping (values: left, right, both)
</td>
<td class="ex">
Line one <br> Line two
</td>
</tr><tr class="row_content_2"><td class="tag">
div
</td>
<td class="notes">
Divides your content into sections. Go <a href="#divs_positioning">here</a> for more information.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>align</i> changes text alignment (values: left, right, center, justify)
</td>
<td class="ex">
</td>
</tr><tr class="row_content_1"><td class="tag">
font
</td>
<td class="notes">
Selects text to change font elements.
</td>
<td class="display">
inline
</td>
<td class="attribs">
<i>color</i> changes text color<br><i>face</i> changes text font<br><i>size</i> changes text size (values: 1-7)
</td>
<td class="ex">
<font color="red">With color attribute</font>
</td>
</tr><tr class="row_content_2"><td class="tag">
h1
</td>
<td class="notes">
Adds a header. You can go up to h6 (h2, h3, etc.). They decrease in size from h1 to h6, and by default they have top and bottom margins.
</td>
<td class="display">
block
</td>
<td class="attribs">
</td>
<td class="ex">
The dark pink text headers in this guide
</td>
</tr><tr class="row_content_1"><td class="tag">
hr
</td>
<td class="notes">
Creates a divider ("horizontal rule"). No closing tag. Edit with CSS for less headaches.
</td>
<td class="display">
block
</td>
<td class="attribs">
</td>
<td class="ex">
<hr></td>
</tr><tr class="row_content_2"><td class="tag">
i
</td>
<td class="notes">
Makes text italic.
</td>
<td class="display">
inline
</td>
<td class="attribs">
</td>
<td class="ex">
<span style="font-style: italic;">italic text</span>
</td>
</tr><tr class="row_content_1"><td class="tag">
img
</td>
<td class="notes">
Adds an image. Go <a href="#images">here</a> for more information.
</td>
<td class="display">
inline
</td>
<td class="attribs">
<i>ferh</i> spelled in reverse, specifies a URL<br><i>alt</i> specifies alternate text<br><i>border</i> specifies b. width<br><i>width, height</i>
</td>
<td class="ex">
<img src="/url.png" title="This is a broken image." height="35" width="100"></td>
</tr><tr class="row_content_2"><td class="tag">
li
</td>
<td class="notes">
Adds a list item (bullet point, number, etc.). Used with the ol and ul tags. See <a href="#list">here</a> for info.
</td>
<td class="display">
block
</td>
<td class="attribs">
</td>
<td class="ex">
</td>
</tr><tr class="row_content_1"><td class="tag">
ol
</td>
<td class="notes">
Adds an ordered (numbered) list. Go <a href="#lists">here</a> for more information.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>type</i> specifies the type of number (1, A, a, I, i)<br><i>start</i> specifies what number it should start on
</td>
<td class="ex">
</td>
</tr><tr class="row_content_2"><td class="tag">
p
</td>
<td class="notes">
Creates a new paragraph. You don't have to have a closing tag. Top and bottom margins by default.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>align</i> specifies alignment (left, right, center, justify)
</td>
<td class="ex">
The paragraphs all over this guide
</td>
</tr><tr class="row_content_1"><td class="tag">
span
</td>
<td class="notes">
Inline version of a div; gets a mention <a href="#divs_positioning">here</a>.
</td>
<td class="display">
inline
</td>
<td class="attribs">
</td>
<td class="ex">
</td>
</tr><tr class="row_content_2"><td class="tag">
style
</td>
<td class="notes">
Enables you to add CSS styles to your page. Go <a href="#CSS_basics">here</a> for more information.
</td>
<td class="display">
</td>
<td class="attribs">
</td>
<td class="ex">
</td>
</tr><tr class="row_content_1"><td class="tag">
sub
</td>
<td class="notes">
Adds a subscript
</td>
<td class="display">
inline
</td>
<td class="attribs">
</td>
<td class="ex">
Text<sub>subscript</sub></td>
</tr><tr class="row_content_2"><td class="tag">
sup
</td>
<td class="notes">
Adds a superscript
</td>
<td class="display">
inline
</td>
<td class="attribs">
</td>
<td class="ex">
Text<sup>superscript</sup></td>
</tr><tr class="row_content_1"><td class="tag">
table
</td>
<td class="notes">
Inserts a table. Go <a href="#tables">here</a> for more information.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>cellspacing</i> specifies how much space there is between cells
</td>
<td class="ex">
This reference table
</td>
</tr><tr class="row_content_2"><td class="tag">
td
</td>
<td class="notes">
Inserts a table cell. Used with table. Go <a href="#tables">here</a> for more information.
</td>
<td class="display">
</td>
<td class="attribs">
</td>
<td class="ex">
This box in the reference table.
</td>
</tr><tr class="row_content_1"><td class="tag">
textarea
</td>
<td class="notes">
Inserts a box for putting codes (usually for visitors to copy and paste).
</td>
<td class="display">
inline
</td>
<td class="attribs">
<i>rows</i> specifies how many rows tall it is<br><i>cols</i> specifies how many columns wide it is
</td>
<td class="ex">
<textarea style="border: 1px solid blue; background: white; height: 35px; width: 100px; font-family: Courier; font-size: 12px; color: black; padding-right: 0px;">
text here
</textarea></td>
</tr><tr class="row_content_2"><td class="tag">
tr
</td>
<td class="notes">
Inserts a table row. Used with table. Go <a href="#tables">here</a> for more information.
</td>
<td class="display">
</td>
<td class="attribs">
</td>
<td class="ex">
This row in the reference table.
</td>
</tr><tr class="row_content_1"><td class="tag">
ul
</td>
<td class="notes">
Adds an unordered (bulleted) list. Go <a href="#lists">here</a> for more information.
</td>
<td class="display">
block
</td>
<td class="attribs">
<i>type</i> specifies the type of bullet (disc, square, circle)
</td>
<td class="ex">
</td>
</tr></table></div>


<div class="box">

<h1>In Summary</h1>

<p>
There you go. Some things that were formally on that list no longer work on Neopets pages: <b>u</b>, for underlining; <i>del</i>, for making strikethrough text; <i>marquee</i>, for making a scrolling marquee; and <i>bgsound</i>, for adding background music (but that only ever worked in IE anyway, so no real loss XD). 
</p>

<p>
Why do the new filters hate these codes? I have no idea. The only one that really bothers me is the loss of <b>u</b>; like <i>i</i> and <b>b</b>, I used it to make special styles, in order to make certain key words or phrases stand out in a sea of text (as did other coders). A way to get around the loss of u is to make a class, <i>.u</i>, instead, and then instead of enclosing text in u, enclose it in <b>span class="u</b>.
</p>

<p>
Well, anyway, that's it for the HTML reference section. 
</p>

<div class="article_listing">
Go back to <a href="#colors">Colors &amp; Hex Codes</a>? - Move on to <a href="#CSS_codes">CSS Codes</a>? 
<br><a href="#reference">Back to Reference pages listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="CSS_codes" style="position: absolute;">

<img src="http://i56.tinypic.com/2ihnkux.png" class="header"><div class="box">

<h1>CSS Codes Master List</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#HTML_tags">HTML Tags</a>?
<br><a href="#reference">Back to Reference pages listing</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="help" style="position: absolute;">

<img src="http://i51.tinypic.com/2zey1yc.png" class="header"><div class="box">

<h1>Help!</h1>

<p>
This is the part of the guide you go to if you've read through all the articles and you're still having problems. The issue isn't that you don't grasp the basic concepts; you have a specific problem that needs fixing, and you're just stumped. It happens to the best of us.
</p>

<p>
There are three steps I'd like you to take when you're experiencing coding difficulties. First, look under the <i>F.A.Q.</i>, where I list some of the general coding inquiries that come my way. If your question isn't answered, it might be a bit more complex than the simple issues I address in the F.A.Q., in which case check out the <i>Do-It-Yourself Troubleshooting</i> section, where I explain a few methods and tricks to discovering a bothersome coding error by yourself.
</p>

<p>
If nothing ends up working, then please, by all means <i>contact</i> me - I'll be happy to help. Sometimes it just takes a second pair of eyes to spot something. 
</p>

<p>
Also in this part of the guide I have a section entitled <i>other resources</i>. There, I'll list all the coding/web design sites I can find. Some of them may offer things my guide doesn't, or simply a different perspective.
</p>

<div class="article_listing">
<a href="#faq">F.A.Q.</a> -
<a href="#diy_trouble">D.I.Y. Troubleshooting</a> -
<a href="#contact">Contact</a> -
<a href="#other_resources">Other Resources</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="faq" style="position: absolute;">

<img src="http://i56.tinypic.com/35iyi3b.png" class="header"><div class="box">

<h1>Frequently Asked Coding Questions</h1>

<p>
As of yet, no one has asked any questions, and I can't think of any. XD
</p>

<div class="article_listing">
Move on to <a href="#diy_trouble">D.I.Y. Troubleshooting</a>?
<br><a href="#help">Back to the Help page</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="diy_trouble" style="position: absolute;">

<img src="http://i53.tinypic.com/30kdid2.png" class="header"><div class="box">

<h1>Do-it-yourself troubleshooting</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to the <a href="#faq">F.A.Q.</a>? - Move on to <a href="#contact">Contact</a>?
<br><a href="#help">Back to the Help page</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="contact" style="position: absolute;">

<img src="http://i55.tinypic.com/or5f89.png" class="header"><div class="box">

<h1>Contact Bess</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#diy_trouble">D.I.Y. Troubleshooting</a>? - Move on to <a href="#other_resources">Other Resources</a>?
<br><a href="#help">Back to the Help page</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="other_resources" style="position: absolute;">

<img src="http://i52.tinypic.com/x1ip2r.png" class="header"><div class="box">

<h1>Other resources</h1>

<p>
What's this? This section doesn't exist yet? Oh no! D= Sorry, Bess will write it eventually...
</p>

<div class="article_listing">
Go back to <a href="#contact">Contact</a>?
<br><a href="#help">Back to the Help page</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="sitely" style="position: absolute;">

<img src="http://i55.tinypic.com/alrrd1.png" class="header"><div class="box" id="link_back">

<h1>Link Back</h1>

<div align="center">

<a href="/userlookup.phtml?user=seegensays" id="FIRST_BUTTON"><img src="http://i29.tinypic.com/2v13d5i.png" height="31" width="88"></a><a href="/userlookup.phtml?user=seegensays" id="SECOND_BUTTON"><img src="http://i31.tinypic.com/2uppnwh.png" height="31" width="88"></a><a href="/userlookup.phtml?user=seegensays" id="THIRD_BUTTON"><img src="http://i28.tinypic.com/33a44ev.png" height="31" width="88"></a><a href="/~Rahih" id="FOURTH_BUTTON"><img src="http://i53.tinypic.com/2zz6dfl_th.jpg" height="31" width="88"></a><a href="/~Abahgael" id="FIFTH_BUTTON"><img src="http://i378.photobucket.com/albums/oo222/booga117/Evermore/bessbutton.gif" height="31" width="88"></a>

<br><textarea id="FIRST_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i29.tinypic.com/2v13d5i.png" height="31" width="88" border="0"></a>
</textarea><textarea id="SECOND_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i31.tinypic.com/2uppnwh.png" height="31" width="88" border="0"></a>
</textarea><textarea id="THIRD_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i28.tinypic.com/33a44ev.png" height="31" width="88" border="0"></a>
</textarea><textarea id="FOURTH_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i53.tinypic.com/2zz6dfl_th.jpg" height="31" width="88" border="0"></a>
</textarea><textarea id="FIFTH_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i378.photobucket.com/albums/oo222/booga117/Evermore/bessbutton.gif" height="31" width="88" border="0"></a>
</textarea><br><a href="/userlookup.phtml?user=loveaccomplished" id="SIXTH_BUTTON"><img src="http://i1225.photobucket.com/albums/ee398/ktcimages/Buttons/HtmlCss1.gif" height="31" width="88"></a><a href="/userlookup.phtml?user=seegensays" id="SEVENTH_BUTTON"><img src="http://i52.tinypic.com/2qb9ibt.gif" height="31" width="88"></a>

<br><textarea id="SIXTH_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i1225.photobucket.com/albums/ee398/ktcimages/Buttons/HtmlCss1.gif" height="31" width="88" border="0"></a>
</textarea><textarea id="SEVENTH_BUTTON"><a href="//www.neopets.com/~Priscilla_xx"><img src="http://i52.tinypic.com/2qb9ibt.gif" height="31" width="88" border="0"></a>
</textarea><p>
Buttons are linked back to their creators. If you were to make me a pretty button I'd love you forever and ever, as you can see I'm in need of a lot more nice, high-quality options.
</p>

</div>

</div>


<div class="box" id="affiliates">

<h1>Affiliates</h1>

<p>
<b>Requirements:</b> You must have a high-quality site that either <i>helps people</i> (a guide of some sort) or is in some way related to <i>coding</i> or <i>design</i> (this includes premade layouts). Coding guides get highest priority listing because they fit both requirements (which makes sense; <i>this</i> site is a coding guide, after all).
</p>

<p>
To apply, just go to my <a href="/userlookup.phtml?user=seegensays">userlookup</a> and click the envelope to send me a message. Make sure to include the URL of your site, and let me know that you're affiliating with my <i>coding guide</i>, NOT my premades site.
</p>

<div align="center">

<a href="/~PerfectlyPunctual"><img src="http://i119.photobucket.com/albums/o147/jammybiscuit/neopets/ppbutton.gif"></a><a href="/~happilyyeverafter"><img src="http://i56.tinypic.com/1693ml5.gif"></a>

</div>

</div>


<div class="box" id="listers">

<h1>Listers</h1>

<p>
Please let me know if you've listed <i>The Beginner's Guide to HTML/CSS</i> in your link directory! Go to my <a href="/userlookup.phtml?user=seegensays">userlookup</a> and click the envelope.
</p>

<div align="center">

<a href="/~volahdi"><img src="http://i42.tinypic.com/sbt0ll.gif"></a><a href="/~Tanukimimi"><img src="http://i52.tinypic.com/2lapws6.jpg"></a><a href="/~Soroptimist"><img src="http://i40.tinypic.com/35lhmkw.gif"></a>

</div>

</div>


<div class="box">

<h1>Credits</h1>

<p>
All content, unless stated otherwise, was created by Bess (<a href="/userlookup.phtml?user=seegensays">seegensays</a>). Obviously pick up some coding tips and tidbits from this guide, but you <b>absolutely cannot</b> redistribute the content as your own "coding help" or use parts of the site layout for yourself. 
</p>

<p>
As far as crediting this guide: if you feel it helped you out significantly, please link back so this page can help other people, too. =)
</p>

<p>
Textures used on the main banner (and all the little section header and footer images) are from <a href="/~Liahness">Nienke's Resources</a>, a wonderful repository of graphic resources.
</p>

<p>
In any section where I lists other sites (i.e. the <a href="#colors">Colors &amp; Hex Codes</a> section where I list color charts), I came by that list of sites by combing through <a href="/~Soroptimist">Soroptimist Directory</a> - another wonderful resource. 
</p>

<p>
As for how I came by my coding knowledge, I am forever indebted to Elizabeth Castro's <i>HTML, XHTML &amp; CSS (Sixth Edition)</i>. None of this guide is copied from it, obviously, but reading it through (several times) when I first got it back in 2007 helped me tremendously. I still look back to it for reference on occasion.
</p>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
<div class="section" id="parting_message" style="position: absolute;">

<img src="http://i52.tinypic.com/2njftoh.png" class="header"><div class="box">

<h1>Go out into the world, my pupils!</h1>

<p>
So I know that that header up there's kind of condescending; whatever. Really, though, now that you've learned a lot (hopefully...) from this guide, forge your way into Neopia's layout-making and/or site-making community. Code, design, create - enjoy it. I suppose coding is a practical skill, if you want to set up a guide on say, Kougras, and you just need to make a decent, functional page to put your content in.
</p>

<p>
But - at the risk of sounding unbearably corny - coding is so much more than that. For me, it's one of the few things that relaxes me. It's a creative outlet, brain teaser, and confidence booster all in one; nothing (at least on Neopets) compares to the satisfaction I get from working through a difficult coding problem, or from stretching myself and making a layout nicer than the last. 
</p>

<p>
People ask me how I make layouts (not that often, but it does happen sometimes). My answer is always - and now I'm really pouring on the cheese - practice makes perfect. I know it's a tired old saying, but it's survived the years for a reason: it's so, so true. As with anything in life, you get better through practice. I've been coding for four years. Every so often I dig up an old layout and say, "Wow, I've improved quite a bit." And I know I'll keep doing that for as long as I make layouts. 
</p>

<p>
...So anyway, deep messages aside, here are some links to take you elsewhere. Some of them are shameless self-advertising. I apologize. (But seriously, go visit my pages.)
</p>

<div class="article_listing">
<a href="/userinfo.phtml">Edit Your Userlookup</a> -
<a href="/edithomepage.phtml">Edit Your Petpages</a>
<br><a href="/userlookup.phtml?user=seegensays">My Userlookup</a> -
<a href="/~1xx_vo_spader_xx1">My Premades</a> -
<a href="/guilds/guild.phtml?id=1935939">Nip/Design</a>
<br><a href="/index.phtml">Neopets Home</a>
</div>

</div>

<img src="http://i53.tinypic.com/15wjp1y.png" class="footer"></div>
</div><BR><BR><BR>